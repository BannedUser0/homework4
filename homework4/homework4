#include <iostream>
#include <vector>
#include <string>

using namespace std; // namespace std 사용

class Book {
public:
    string title;
    string author;
    int amount;
    Book(const string& title, const string& author, int amount)
        : title(title), author(author), amount(3){
    }
};

class BookManager {
private:
    vector<Book> books; // 책 목록 저장

public:
    // 책 추가 메서드
    void addBook(const string& title, const string& author, int amount) {
        books.push_back(Book(title, author, amount = 3)); // push_back 사용

        cout << "책이 추가되었습니다: " << title << " by " << author << " \n" << endl;
    }

    // 모든 책 출력 메서드
    void displayAllBooks() const {
        if (books.empty()) {
            cout << "현재 등록된 책이 없습니다. \n" << endl;
            return;
        }

        cout << "현재 도서 목록:" << endl;
        for (size_t i = 0; i < books.size(); i++) { // 일반적인 for문 사용
            cout << "- " << books[i].title << " by " << books[i].author << " \n" << endl;
        }
    }

    void searchByBookName(const string& title) {
        char YorN;
        bool found = false;
        int bookNumber = 0;

        if (books.empty()) {
            cout << "해당 책의 재고가 없습니다.  \n" << endl;
        }
        else if (books.size() > 0) {
            for (size_t i = 0; i < books.size(); i++) { // 일반적인 for문 사용
                if (books[i].title == title) {
                    cout << books[i].title << "의 재고가 " << books[i].amount << "권 있습니다  \n" << endl;
                    found = true;
                    bookNumber = i;
                }
            }
        }
        if (found) {
        borrowBook(bookNumber);
        }

        if (!found) {
        cout << "해당 책은 등록되어 있지 않습니다.  \n" << endl;
        }

    }

    void searchByAuthorName(const string& author) {
        bool found = false;

        if (books.empty()) {
            cout << "해당 작가의 책이 존재하지 않습니다.  \n" << endl;

        }
        else if (books.size() > 0) {
            for (size_t i = 0; i < books.size(); i++) { // 일반적인 for문 사용
                if (books[i].author == author) {
                    cout << books[i].author << "작가의 책은" << books[i].title << "입니다.  \n" << endl;
                    found = true;
                    cout << "해당 책의 코드는 " << i << "입니다.\n" << endl;
                    
                }
            }
            if (found) {
                cout << "대여하실 책의 코드를 입력해주세요 \n" << endl;
                string answer;
                getline(cin, answer);
                borrowBook(stoi(answer));
            }

                if (!found) {
                    cout << "해당 작가의 책이 존재하지 않습니다. \n" << endl;
                }
            
        }
    };

    void borrowBook(int value) {
        if (books[value].amount > 0) {
            cout << books[value].title << " - 해당 책을 대여하시겠습니까? Y/N" << endl;
            string YorN;
            cin.clear(); // 이전 입력의 잔여 버퍼를 제거
            getline(cin, YorN);
            if (YorN == "Y" || YorN == "y") {
                books[value].amount -= 1;
                cout << "해당 책을 대여합니다. 남은 재고 수 :" << books[value].amount << "\n" << endl;
                return;
            }
            else cout << "책 대여를 취소하였습니다. 처음으로 돌아갑니다. \n" << endl;
            return;
        }
        else
        {
            cout << "해당 책은 대여할수 없습니다.  \n" << endl;
        }
    }

    void bringBack() {
        cout << "반납할 책의 제목을 입력해주세요" << endl;
        string backBook;
        bool check = false;
        cin.clear(); // 이전 입력의 잔여 버퍼를 제거
        cin.ignore();
        getline(cin, backBook);
            for (size_t i = 0; i < books.size(); i++) { // 일반적인 for문 사용
                if (books[i].title == backBook) {
                books[i].amount += 1;
                cout << books[i].title << "반납되었습니다. 남은 재고 수 :" << books[i].amount << " \n" << endl;
                check = true;
                }
            }
            if (!check) {
                cout << "해당 책은 저희 매장의 책이 아닙니다 \n" << endl;
            }
    };
};

int main() {
    BookManager manager;

    // 도서관 관리 프로그램의 기본 메뉴를 반복적으로 출력하여 사용자 입력을 처리합니다.
    // 프로그램 종료를 선택하기 전까지 계속 동작합니다.
    while (true) {
        cout << "\n도서관 관리 프로그램" << endl;
        cout << "1. 책 추가" << endl; // 책 정보를 입력받아 책 목록에 추가
        cout << "2. 책 제목 검색 및 대여" << endl; //
        cout << "3. 책 저자 검색" << endl; //
        cout << "4. 모든 책 출력" << endl; // 현재 책 목록에 있는 모든 책 출력
        cout << "5. 반납 시스템" << endl; // 현재 책 목록에 있는 모든 책 출력
        cout << "6. 종료" << endl; // 프로그램 종료
        cout << "선택: ";

        int choice; // 사용자의 메뉴 선택을 저장
        cin >> choice;

        if (choice == 1) {
            // 1번 선택: 책 추가
            // 사용자로부터 책 제목과 저자명을 입력받아 BookManager에 추가합니다.
            string title, author;
            int amount = 1;
            cout << "책 제목: ";
            cin.ignore(); // 이전 입력의 잔여 버퍼를 제거
            getline(cin, title); // 제목 입력 (공백 포함)
            cout << "책 저자: ";
            getline(cin, author); // 저자명 입력 (공백 포함)
            manager.addBook(title, author, amount); // 입력받은 책 정보를 추가
        }
        else if (choice == 2) {
            // 2번 선택: 책 제목 검색
            // 입력값과 현재 BookManager에 저장된 책 목록에서 일치하는 값을 출력합니다.
            string title;
            cout << "책 제목: ";
            cin.ignore(); // 이전 입력의 잔여 버퍼를 제거
            getline(cin, title); // 제목 입력 (공백 포함)
            manager.searchByBookName(title);
        }
        else if (choice == 3) {
            string author;
            // 3번 선택: 책 저자 검색
            // 입력값과 현재 BookManager에 저장된 저자 목록에서 일치하는 값을 출력합니다.
            cout << "저자의 이름: ";
            cin.ignore(); // 이전 입력의 잔여 버퍼를 제거
            getline(cin, author); // 제목 입력 (공백 포함)
            manager.searchByAuthorName(author);
        }
        else if (choice == 4) {
            // 4번 선택: 모든 책 출력
            // 현재 BookManager에 저장된 책 목록을 출력합니다.
            manager.displayAllBooks();
        }
        else if (choice == 5) {
            // 5번 선택: 반납
            // 대여했던 책을 반납합니다.
            manager.bringBack();
        }
        else if (choice == 6) {
            // 6번 선택: 종료
            // 프로그램을 종료하고 사용자에게 메시지를 출력합니다.
            cout << "프로그램을 종료합니다." << endl;
            break; // while 루프 종료
        }
        else {
            // 잘못된 입력 처리
            // 메뉴에 없는 번호를 입력했을 경우 경고 메시지를 출력합니다.
            cout << "잘못된 입력입니다. 다시 시도하세요." << endl;
        }
    }

    return 0; // 프로그램 정상 종료
}